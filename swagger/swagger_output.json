{
  "swagger": "2.0",
  "info": {
    "title": "YSpotify-API",
    "description": "API allowing users to be registered, connected, part of a group and can synchronize data from spotify API",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "Connexion"
        ],
        "summary": "Register a new user",
        "description": "Register a new user if it does not already exist.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User credentials",
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully registered"
          },
          "400": {
            "description": "User already exist"
          }
        }
      }
    },
    "/login": {
      "get": {
        "tags": [
          "Connexion"
        ],
        "summary": "Log in an existing user.",
        "description": "Generate a 1h expiring JWT token for a user.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "JWT token generated successfully"
          },
          "401": {
            "description": "JWT token not generated: wrong header or wrong credentials"
          }
        }
      }
    },
    "/join-group": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Add a user to a group.",
        "description": "Add a user to a group. If the user join a group that doesn't exist, the group is\r   created and the user is the owner of the group. If the user is already in a group, then\r   he automatically quit his current group to join the new one. If the owner of the group leaves it,\r   a new owner is randomly chosen from the members of the group. If the user is the only member of the group,\r   the current group will disappear.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Group name",
            "schema": {
              "$ref": "#/definitions/NewGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group successfully joined"
          }
        }
      }
    },
    "/auth-url": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/callback": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "NewUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "CookieGank"
        },
        "password": {
          "type": "string",
          "example": "azerty"
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "NewGroup": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "example": "Cookies"
        }
      }
    }
  }
}